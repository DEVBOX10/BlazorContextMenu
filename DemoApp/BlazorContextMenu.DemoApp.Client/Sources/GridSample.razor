@inject HttpClient httpClient
@inject IJSRuntime jsRuntime

<table class="table">
    <thead>
        <tr>
            <th width="30px">Favorite?</th>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in forecasts)
        {
            <ContextMenuTrigger WrapperTag="tr" MenuId="tableContextMenu" Data="forecast" CssClass="@((forecast.Highlight ? "table-primary" : ""))">
                <td>
                @{
                    if (forecast.Favorite)
                    {
                        <i class="fas fa-star" style="color:gold"></i>
                    }
                }
                </td>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </ContextMenuTrigger>
        }
     </tbody>
</table>

<ContextMenu Id="tableContextMenu">
    <Item OnClick="@LoadData"> <i class="fas fa-sync-alt blue-icon"></i> Reload</Item>
    <Item OnClick="@DeleteClick"> <i class="fas fa-trash-alt red-icon"></i> Delete</Item>
    <Item>
        Set
        <SubMenu>
            <Item OnClick="VacationClick">
                @{
                    var forecast = context.Data as WeatherForecast;
                    if (forecast.Favorite)
                    {
                        <i class="far fa-star" style="color:gold"></i>
                    }
                    else
                    {
                        <i class="fas fa-star" style="color:gold"></i>
                    }
                }
                Favorite
            </Item>
            <Item OnClick="DangerousClick">
                @{
                    var forecast = context.Data as WeatherForecast;
                    if (forecast.Highlight)
                    {
                        <i class="far fa-flag" style="color:orangered"></i>
                    }
                    else
                    {
                        <i class="fas fa-flag" style="color:orangered"></i>
                    }
                }
                Highlight
            </Item>
        </SubMenu>
    </Item>
</ContextMenu>

@functions{
    List<WeatherForecast> forecasts = new List<WeatherForecast>();
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    async Task LoadData()
    {
        forecasts = (await httpClient.GetFromJsonAsync<WeatherForecast[]>("api/SampleData/WeatherForecasts")).ToList();
    }

    void DeleteClick(ItemClickEventArgs e)
    {
        var currentForecast = e.Data as WeatherForecast;
        forecasts.Remove(currentForecast);
    }

    void VacationClick(ItemClickEventArgs e)
    {
        e.IsCanceled = true;
        var currentForecast = e.Data as WeatherForecast;
        currentForecast.Favorite = !currentForecast.Favorite;
    }

    void DangerousClick(ItemClickEventArgs e)
    {
        e.IsCanceled = true;
        var currentForecast = e.Data as WeatherForecast;
        currentForecast.Highlight = !currentForecast.Highlight;
    }
}
